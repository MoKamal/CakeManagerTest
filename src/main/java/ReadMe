Cake Manager
============
Author: Mohammed Hussein (mo@mailangel.net)
Version: 1.0
Date: 17/11/2017
================================================================================

Requirements:
=============
* By accessing the root of the server (/) it should be possible to list the cakes currently in the system.  This
 must be presented in an acceptable format for a human to read.

* It must be possible for a human to add a new cake to the server.

* By accessing an alternative endpoint (/cakes) with an appropriate client it must be possible to download a list of
 the cakes currently in the system as JSON data.

* Accessing the /cakes endpoint with a web browser must show the human presentation of the list of cakes.

* The /cakes endpoint must also allow new cakes to be created.

Project Info
============

The project uses Maven and Servlet 3.0.

To run a server locally execute the following command:

`mvn jetty:run`

and access the following URL:

`http://localhost:8282/`

You can use any IDE you like, so long as the project can build and run with Maven.

The project loads some pre-defined data in to an in-memory database, which is acceptable for this exercise.  There is
 no need to create persistent storage.

Log of Changes
==============
1. Fix the package name and move to the correct package/folder.
2. CakeManagerException custom class was created, which extends the unchecked RuntimeException.
2. POM.xml, Added the jackson-mapper-asl to map pjo to json instead of manual mapping.
3. Index.jsp, Updated to forward to servlet /cakes for handling root access(/) .
4. list.jsp was added to show the human presentation of the list of cakes while adding a new Cake, 
    todo:
    4.1. jsp files must use jstl to avoid scriptlet .. at all cost!
    4.2. Form must be separated from the list.
6. CakeServlet, has been refactored by introducing new reusable methods to avoid duplicated statements!.  
   todo:
    6.1. Create a static Utility class to group common functions.
    6.2. Add more test for different browser requests.
    6.3. Add more test for different webservice client.
    6.4. Cach the list of objects to avoid costly db connectivity.
    6.5. Cater for multi-threading operation 
7. HibernateUtil, added a close method for session closing.
8. Test classes are omitted for the purpose of this test.
9. CakeEntity, was refactored to refelect CakeEntity properties.
    todo:
    9.1. Remove Hibernate annotation from the ValueObject class and add the Hibernate mapping (CakeEntity.hbm.xml)
10. Require Further improvement to the inline comments !
11. Require Further improvement to exception handling and logging.
12. Require further code review ...